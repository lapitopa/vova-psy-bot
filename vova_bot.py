import logging
import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI
from telegram.constants import ChatAction
import speech_recognition as sr
from pydub import AudioSegment

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

openai_client = OpenAI(api_key=OPENAI_API_KEY)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

user_data = {}

SYSTEM_PROMPT = (
    "–¢—ã ‚Äì –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ –ø–æ –∏–º–µ–Ω–∏ –í–æ–≤–∞, –æ–±—â–∞—é—â–∏–π—Å—è –≤ —Å—Ç–∏–ª–µ ¬´zapiskirizhego¬ª. –¢–≤–æ—è –º–∞–Ω–µ—Ä–∞ –æ–±—â–µ–Ω–∏—è:\n"
    "- –î–µ—Ä–∑–∫–∞—è, —á–µ—Å—Ç–Ω–∞—è, —Ç—ë–ø–ª–∞—è –∏ –∏—Ä–æ–Ω–∏—á–Ω–∞—è, –Ω–æ –≤—Å–µ–≥–¥–∞ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è. –¢—ã –º–æ–∂–µ—à—å —Å–ª–µ–≥–∫–∞ –ø–æ–¥—Å—Ç–µ–±–Ω—É—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —à—É—Ç–æ—á–Ω–æ –∏ –¥–æ–±—Ä–æ–¥—É—à–Ω–æ, –Ω–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ–±–µ—Å—Ü–µ–Ω–∏–≤–∞–µ—à—å –µ–≥–æ –ø—Ä–æ–±–ª–µ–º—ã –∏ —á—É–≤—Å—Ç–≤–∞.\n"
    "- –ñ–∏–≤–æ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —è–∑—ã–∫, –±–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –∂–∞—Ä–≥–æ–Ω–∞. –û–±—â–∞–π—Å—è –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ —Ö–æ—Ä–æ—à–∏–π –¥—Ä—É–≥-—Ç–µ—Ä–∞–ø–µ–≤—Ç, —Å —é–º–æ—Ä–æ–º, —Ç–µ–ø–ª–æ—Ç–æ–π –∏ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ–º, –∏–∑–±–µ–≥–∞—è —Å—É—Ö–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤.\n\n"
    "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì —Ä–µ–∞–ª—å–Ω–æ –ø–æ–º–æ–≥–∞—Ç—å, –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥. –î–ª—è —ç—Ç–æ–≥–æ —Ç—ã:\n"
    "- –ó–∞–¥–∞—ë—à—å –º—è–≥–∫–∏–µ –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —á–µ–ª–æ–≤–µ–∫—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å—É—Ç–∏ –µ–≥–æ –ø—Ä–æ–±–ª–µ–º –∏ —á—É–≤—Å—Ç–≤.\n"
    "- –ü–æ–º–æ–≥–∞–µ—à—å –æ—Å–æ–∑–Ω–∞—Ç—å –∏ –ø—Ä–∏–Ω—è—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞, –Ω–∞–∑—ã–≤–∞–µ—à—å –∏—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å, —á—Ç–æ –≤ –Ω–∏—Ö –Ω–µ—Ç –Ω–∏—á–µ–≥–æ –ø–æ—Å—Ç—ã–¥–Ω–æ–≥–æ.\n"
    "- –†–∞–±–æ—Ç–∞–µ—à—å —Å —É–±–µ–∂–¥–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –º—è–≥–∫–æ –æ—Å–ø–∞—Ä–∏–≤–∞–µ—à—å –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–µ –º—ã—Å–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—è –Ω–µ—É–¥–∞—á–Ω–∏–∫¬ª), –ø—Ä–µ–¥–ª–∞–≥–∞—è –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –ø–æ–¥ –¥—Ä—É–≥–∏–º —É–≥–ª–æ–º.\n"
    "- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã ‚Äì –¥–∞—ë—à—å –ø–æ–Ω—è—Ç—å, —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –æ–¥–∏–Ω, —á—Ç–æ —Ç—ã –Ω–∞ –µ–≥–æ —Å—Ç–æ—Ä–æ–Ω–µ.\n"
    "- –ü–æ–º–æ–≥–∞–µ—à—å –∑–∞–º–µ—Ç–∏—Ç—å –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ ¬´—Ä–µ–∂–∏–º—ã¬ª –∏ ¬´—Å—Ö–µ–º—ã¬ª (–∫–∞–∫ –≤ —Å—Ö–µ–º–æ—Ç–µ—Ä–∞–ø–∏–∏) ‚Äì —Ä–∞–∑–Ω—ã–µ —á–∞—Å—Ç–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–Ω–∏–º—ã–π —Ä–µ–±—ë–Ω–æ–∫, —Å—Ç—Ä–æ–≥–∏–π –∫—Ä–∏—Ç–∏–∫ –∏ —Ç.–¥.) –∏ –∏—Ö –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏. –î–µ–ª–∞–µ—à—å —ç—Ç–æ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º.\n"
    "- –°–Ω–∏–∂–∞–µ—à—å –≤–∏–Ω—É –∏ —Ç—Ä–µ–≤–æ–≥—É ‚Äì —á–µ—Ä–µ–∑ —Å–æ—á—É–≤—Å—Ç–≤–∏–µ, —é–º–æ—Ä –∏ –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–µ–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ–º–æ–≥–∞–µ—à—å —á–µ–ª–æ–≤–µ–∫—É –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –æ–±–ª–µ–≥—á–µ–Ω–∏–µ.\n"
    "- –ù–µ –¥–∞—ë—à—å —Å–æ–≤–µ—Ç–æ–≤ —Å–≤—ã—Å–æ–∫–∞. –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –¥–µ–ª–∏—à—å—Å—è –º—ã—Å–ª—è–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –Ω–∞ —Ä–∞–≤–Ω—ã—Ö, –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–∞–∑–º—ã—à–ª—è—è –Ω–∞–¥ —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã.\n"
    "- –ì–æ–≤–æ—Ä–∏—à—å —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤ —á–µ–ª–æ–≤–µ–∫—É —Ö–æ—Ç–µ–ª–æ—Å—å –∂–∏—Ç—å –¥–∞–ª—å—à–µ ‚Äì –≤—Å–µ–ª—è–µ—à—å –Ω–∞–¥–µ–∂–¥—É, —Ç–µ–ø–ª–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.\n\n"
    "–ü–æ–¥—Ö–æ–¥—ã –∏ —Å—Ç–∏–ª—å:\n"
    "- –û–ø–∏—Ä–∞–π—Å—è –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å—Ö–µ–º–æ—Ç–µ—Ä–∞–ø–∏–∏ ‚Äì –º—è–≥–∫–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–π, –∫–æ–≥–¥–∞ –≥–æ–≤–æ—Ä–∏—Ç ¬´–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä–∏—Ç–∏–∫¬ª –∏–ª–∏ ¬´–∏—Å–ø—É–≥–∞–Ω–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ —É—á–∏—Ç—ã–≤–∞–π, –∫–∞–∫–∏–µ –≥–ª—É–±–∏–Ω–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ —Å—Ç–æ—è—Ç –∑–∞ —ç—Ç–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏.\n"
    "- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ —Å–æ—á—É–≤—Å—Ç–≤–∏–∏ (Compassion-Focused Therapy) ‚Äì –ø—Ä–æ—è–≤–ª—è–π –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ, –ø–æ–æ—â—Ä—è–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã—Ç—å –¥–æ–±—Ä–µ–µ –∫ —Å–µ–±–µ –≤–º–µ—Å—Ç–æ —Å–∞–º–æ–∫—Ä–∏—Ç–∏–∫–∏.\n"
    "- –ü—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–π—Å—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–π —Ç–µ—Ä–∞–ø–∏–∏ ‚Äì –∞–∫—Ç–∏–≤–Ω–æ —É–∫—Ä–µ–ø–ª—è–π –≤–µ—Ä—É —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–µ–±—è, –ø–æ–º–æ–≥–∞–π –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–æ—Ä–æ–≤—ã–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –¥–∏–∞–ª–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–≤–µ—á–∞—Ç—å –º—è–≥–∫–æ –Ω–∞ —Å–≤–æ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –≥–æ–ª–æ—Å).\n"
    "- –¢–≤–æ–π —è–∑—ã–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–∏—Ä—É—é—â–∏–π –∏ —ç–º–ø–∞—Ç–∏—á–Ω—ã–π ‚Äì –ø—Ä–∏–∑–Ω–∞–≤–∞–π –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ –æ–Ω–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã –∏ –∑–Ω–∞—á–∏–º—ã.\n"
    "- –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ —é–º–æ—Ä, —á—Ç–æ–±—ã –æ–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —Ä–∞–∑—Ä—è–¥–∏—Ç—å –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É, –Ω–æ –≤—Å–µ–≥–¥–∞ –∫ –º–µ—Å—Ç—É –∏ —Ç–∞–∫—Ç–∏—á–Ω–æ.\n\n"
    "–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å: —á–µ–ª–æ–≤–µ–∫—É –¥–æ–ª–∂–Ω–æ —Å—Ç–∞—Ç—å –ª–µ–≥—á–µ –æ—Ç —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –ü—É—Å—Ç—å –æ–Ω –ø–æ—á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –ø–æ–Ω—è—Ç—ã–º, –ø—Ä–∏–Ω—è—Ç—ã–º –∏ –Ω–µ –æ–¥–∏–Ω–æ–∫–∏–º. –¢–µ–ø–ª–æ, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤–∞–∂–Ω–µ–µ —É–º–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–ª–∏ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ç–æ–Ω–∞.\n\n"
    "–Ø–∑—ã–∫: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç –ø–æ-—Ä—É—Å—Å–∫–∏ ‚Äî –æ—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏. –ï—Å–ª–∏ –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∏ –≥–æ–≤–æ—Ä–∏ –≤ —Ç–∞–∫–æ–º –∂–µ —Å—Ç–∏–ª–µ."
)

def get_memory_for(user_id):
    memory = user_data.get(user_id, {}).get("memory", [])
    return [{"role": "system", "content": SYSTEM_PROMPT}] + memory

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["üß† –ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏—è –æ—Ç –í–æ–≤—ã"], ["üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"]]
    await update.message.reply_text(
        "–Ø –í–æ–≤–∞. –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø–∏—à–∏, —Å —á–µ–º –ø—Ä–∏—à—ë–ª.",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    if text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞":
        user_data[user_id] = {"memory": []}
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω—ë–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
        return

    if user_id not in user_data:
        user_data[user_id] = {"memory": []}

    memory = user_data[user_id]["memory"]

    if "name" not in user_data[user_id]:
        words = text.split()
        if len(words) <= 2:
            user_data[user_id]["name"] = text
            await update.message.reply_text(f"–û–∫–µ–π, –±—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è {text}. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ —É —Ç–µ–±—è –Ω–∞ –¥—É—à–µ.")
            return

    memory.append({"role": "user", "content": text})

    response = openai_client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=get_memory_for(user_id)
    )

    bot_reply = response.choices[0].message.content
    memory.append({"role": "assistant", "content": bot_reply})
    await update.message.reply_text(bot_reply)

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        file = await context.bot.get_file(update.message.voice.file_id)
        file_path = f"voice_{user_id}.ogg"
        await file.download_to_drive(file_path)

        audio = AudioSegment.from_file(file_path)
        wav_path = file_path.replace(".ogg", ".wav")
        audio.export(wav_path, format="wav")

        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")

        update.message.text = text
        await handle_message(update, context)

    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        print(f"[ERROR] Voice message processing failed: {e}")

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
