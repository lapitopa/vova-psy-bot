import os
import logging
import random
from openai import OpenAI
from telegram import Update, ReplyKeyboardMarkup, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, 
    ContextTypes, filters
)

# –ò–º–ø–æ—Ä—Ç –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
from memory_manager import add_analysis, delete_user_memory, load_memory
from dialog_handler import start_dialog, handle_dialog_step, user_dialog_state
from keyboard_handler import get_main_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
client = OpenAI(api_key=OPENAI_KEY)

# Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = ApplicationBuilder().token(TOKEN).build()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_analysis_state = {}

# –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
MODEL_SHORT = "gpt-3.5-turbo"
MODEL_ANALYSIS = "gpt-4"

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
async def generate_response(prompt, temperature=0.88, max_tokens=250, model=MODEL_SHORT):
    try:
        response = client.chat.completions.create(
            model=model,
            messages=[{"role": "user", "content": prompt}],
            temperature=temperature,
            max_tokens=max_tokens
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        fallback_responses = [
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?",
            "–ú–æ–∏ –Ω–µ–π—Ä–æ–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä–µ–ª–∏—Å—å. –î–∞–π –º–Ω–µ —Å–µ–∫—É–Ω–¥—É.",
            "–£–ø—Å, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —à—É–º—ã. –ú–æ–∂–µ—à—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å?",
            "–ò–∑–≤–∏–Ω–∏, —è –æ—Ç–≤–ª—ë–∫—Å—è. –û —á—ë–º –º—ã –≥–æ–≤–æ—Ä–∏–ª–∏?",
            "–ú–æ–∑–≥ –∑–∞–≤–∏—Å. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Å—å..."
        ]
        return random.choice(fallback_responses)

# –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def setup_commands(context: ContextTypes.DEFAULT_TYPE):
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –í–æ–≤–æ–π"),
        BotCommand("analyze", "–†–∞–∑–±–æ—Ä –ø–æ –º–µ—Ç–æ–¥—É –†–≠–ü–¢ –∏ –ê–°–¢ —Ç–µ—Ä–∞–ø–∏–∏"),
        BotCommand("talk", "–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–Ω–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å"),
        BotCommand("summary", "–õ–∏—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–∞"),
        BotCommand("clear", "–ù–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞"),
        BotCommand("help", "–ü–æ–¥—Å–∫–∞–∑–∫–∞, –∫—Ç–æ —Ç–∞–∫–æ–π –í–æ–≤–∞ –∏ –∫–∞–∫ —Å –Ω–∏–º –æ–±—â–∞—Ç—å—Å—è")
    ]
    await context.bot.set_my_commands(commands)

# –ö–æ–º–∞–Ω–¥—ã (start/help/analyze/talk/summary/clear/about) —Å–º. –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–µ
# –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã ‚Äî –º–æ–≥—É –≤—Å—Ç–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text.strip()

    # –ö–Ω–æ–ø–∫–∏
    emoji_to_command = {
        "üß† –ê–Ω–∞–ª–∏–∑": analyze_command,
        "üí¨ –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å": talk_command,
        "üìä –í—ã–≤–æ–¥—ã": summary_command,
        "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é": clear_history_command
    }
    
    if message_text in emoji_to_command:
        await emoji_to_command[message_text](update, context)
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
    if user_id in user_dialog_state:
        await handle_dialog_step(update, context)
    elif user_id in user_analysis_state:
        await analyze_command(update, context)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã
        prompt = """–¢—ã –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç-–±–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –í–æ–≤–∞ –≤ —Å—Ç–∏–ª–µ @zapiskirizhego. –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª
        —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–¥–ª–æ–∂–∏—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã /analyze –∏–ª–∏ /talk."""
        suggestion = await generate_response(prompt, temperature=0.9, max_tokens=80)
        await update.message.reply_text(suggestion, reply_markup=get_main_keyboard())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("analyze", analyze_command))
    application.add_handler(CommandHandler("talk", talk_command))
    application.add_handler(CommandHandler("summary", summary_command))
    application.add_handler(CommandHandler("clear", clear_history_command))
    application.add_handler(CommandHandler("about", about_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥...")
    register_handlers()

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–µ–±—Ö—É–∫–æ–º...")
    application.run_webhook(
        listen="0.0.0.0",
        port=10000,
        webhook_url=WEBHOOK_URL,
        url_path="webhook"
    )
